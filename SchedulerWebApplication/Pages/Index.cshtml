@page
@model IndexModel
@{
    ViewData["Title"] = "Home Page";

    List<AppointmentData> appData = new List<AppointmentData>();
    appData.Add(new AppointmentData
            { Id = 1, Subject = "Explosion of Betelgeuse Star", StartTime = new DateTime(2024, 6, 11, 9, 30, 0), EndTime = new DateTime(2024, 6, 11, 11, 0, 0) });
    appData.Add(new AppointmentData
            { Id = 2, Subject = "Thule Air Crash Report", StartTime = new DateTime(2024, 6, 12, 12, 0, 0), EndTime = new DateTime(2024, 6, 12, 14, 0, 0) });
    appData.Add(new AppointmentData
            { Id = 3, Subject = "Blue Moon Eclipse", StartTime = new DateTime(2024, 6, 13, 9, 30, 0), EndTime = new DateTime(2024, 6, 13, 11, 0, 0) });
    appData.Add(new AppointmentData
            { Id = 4, Subject = "Meteor Showers in 2022", StartTime = new DateTime(2024, 6, 14, 13, 0, 0), EndTime = new DateTime(2024, 6, 14, 14, 30, 0) });
    appData.Add(new AppointmentData
            { Id = 5, Subject = "Milky Way as Melting pot", StartTime = new DateTime(2024, 6, 15, 12, 0, 0), EndTime = new DateTime(2024, 6, 15, 14, 0, 0) });

    var validationRules = new Dictionary<string, object>() { { "required", true } };
}

@* context menu styles *@
<style>
    .schedule-context-menu .e-menu-item .new::before {
        content: '\e7f9';
    }

    .schedule-context-menu .e-menu-item .edit::before {
        content: '\ea9a';
    }

    .schedule-context-menu .e-menu-item .recurrence::before {
        content: '\e308';
        font-weight: bold;
    }

    .schedule-context-menu .e-menu-item .today::before {
        content: '\e322';
    }

    .schedule-context-menu .e-menu-item .delete::before {
        content: '\e94a';
    }

    .e-bigger .schedule-context-menu ul .e-menu-item .e-menu-icon {
        font-size: 14px;
    }

    .schedule-context-menu ul .e-menu-item .e-menu-icon {
        font-size: 12px;
    }
</style>

<div class="control-section">
    <div class="schedule-wrapper">
        <ejs-schedule id="schedule" currentView="Month" startHour="08:00" endHour="18:00" selectedDate="new DateTime(DateTime.Today.Year,DateTime.Today.Month,DateTime.Today.Day)" showQuickInfo="false">
            <e-schedule-eventsettings dataSource="appData">
                <e-eventsettings-fields>
                    <e-field-subject name="Subject" title="Subject" validation="validationRules"></e-field-subject>
                    <e-field-location name="Location"></e-field-location>
                    <e-field-description name="Description"></e-field-description>
                    <e-field-starttime name="StartTime" title="Start Time" validation="validationRules"></e-field-starttime>
                    <e-field-endtime name="EndTime" title="End Time" validation="validationRules"></e-field-endtime>
                </e-eventsettings-fields>
            </e-schedule-eventsettings>
            <e-schedule-views>
                <e-schedule-view option="Day"></e-schedule-view>
                <e-schedule-view option="Week"></e-schedule-view>
                <e-schedule-view option="Month"></e-schedule-view>
                <e-schedule-view option="TimelineDay" interval="3" startHour="08:00" endHour="09:00"></e-schedule-view>
            </e-schedule-views>
        </ejs-schedule>

        <ejs-contextmenu id="contextmenu" cssClass="schedule-context-menu" target=".e-schedule" items="@Model.MenuItems" beforeOpen="onContextMenuBeforeOpen" select="onMenuItemSelect">
        </ejs-contextmenu>
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        function onPopupOpen(args) {
            if (args.type === 'Editor') {
                $(".e-title-text").text("New Appointment");

                if (!args.element.querySelector('.custom-field-row')) {
                    var row = ej.base.createElement('div', { className: 'custom-field-row' });
                    var formElement = args.element.querySelector('.e-schedule-form');
                    formElement.firstChild.insertBefore(row, args.element.querySelector('.e-description-row'));

                    // Adding Contact Number field
                    var contactContainer = ej.base.createElement('div', { className: 'custom-field-container' });
                    var contactInputEle = ej.base.createElement('input', {
                        className: 'e-field', attrs: { name: 'ContactNumber' }
                    });
                    contactContainer.appendChild(contactInputEle);
                    row.appendChild(contactContainer);
                    var contactTextBox = new ej.inputs.TextBox({
                        placeholder: 'Contact Number',
                        floatLabelType: 'Always',
                        value: args.data.ContactNumber != null ? args.data.ContactNumber : null
                    });
                    contactTextBox.appendTo(contactInputEle);
                }

                var startElement = args.element.querySelector('#StartTime');
                if (!startElement.classList.contains('e-datetimepicker')) {
                    new ej.calendars.DateTimePicker({ value: new Date(startElement.value) || new Date() }, startElement);
                }

                var endElement = args.element.querySelector('#EndTime');
                if (!endElement.classList.contains('e-datetimepicker')) {
                    new ej.calendars.DateTimePicker({ value: new Date(endElement.value) || new Date() }, endElement);
                }
            }
        }

        // on right click customized options
        var selectedTarget;
        function onContextMenuBeforeOpen(args) {
            var newEventElement = document.querySelector('.e-new-event');
            if (newEventElement) {
                ej.base.remove(newEventElement);
                ej.base.removeClass([document.querySelector('.e-selected-cell')], 'e-selected-cell');
            }
            var scheduleObj = document.querySelector(".e-schedule").ej2_instances[0];
            scheduleObj.closeQuickInfoPopup();
            var targetElement = args.event.target;
            if (ej.base.closest(targetElement, '.e-contextmenu')) {
                return;
            }
            selectedTarget = ej.base.closest(targetElement, '.e-appointment,.e-work-cells,' +
                '.e-vertical-view .e-date-header-wrap .e-all-day-cells,.e-vertical-view .e-date-header-wrap .e-header-cells');
            if (ej.base.isNullOrUndefined(selectedTarget)) {
                args.cancel = true;
                return;
            }
            if (selectedTarget.classList.contains('e-appointment')) {
                var eventObj = scheduleObj.getEventDetails(selectedTarget);
                if (eventObj.RecurrenceRule) {
                    this.showItems(['EditRecurrenceEvent', 'DeleteRecurrenceEvent'], true);
                    this.hideItems(['Add', 'AddRecurrence', 'Today', 'Save', 'Delete'], true);
                } else {
                    this.showItems(['Save', 'Delete'], true);
                    this.hideItems(['Add', 'AddRecurrence', 'Today', 'EditRecurrenceEvent', 'DeleteRecurrenceEvent'], true);
                }
                return;
            }
            this.hideItems(['Save', 'Delete', 'EditRecurrenceEvent', 'DeleteRecurrenceEvent'], true);
            this.showItems(['Add', 'AddRecurrence', 'Today'], true);
        }

        function onMenuItemSelect(args) {
            var scheduleObj = document.querySelector(".e-schedule").ej2_instances[0];
            var selectedMenuItem = args.item.id;
            var eventObj;
            if (selectedTarget.classList.contains('e-appointment')) {
                eventObj = scheduleObj.getEventDetails(selectedTarget);
            }
            switch (selectedMenuItem) {
                case 'Today':
                    scheduleObj.selectedDate = new Date();
                    break;
                case 'Add':
                case 'AddRecurrence':
                    var selectedCells = scheduleObj.getSelectedElements();
                    var activeCellsData = scheduleObj.getCellDetails(selectedCells.length > 0 ? selectedCells : selectedTarget);
                    if (selectedMenuItem === 'Add') {
                        scheduleObj.openEditor(activeCellsData, 'Add');
                    } else {
                        scheduleObj.openEditor(activeCellsData, 'Add', null, 1);
                    }
                    break;
                case 'Save':
                case 'EditOccurrence':
                case 'EditSeries':
                    if (selectedMenuItem === 'EditSeries') {
                        eventObj = new ej.data.DataManager(scheduleObj.eventsData).executeLocal(new ej.data.Query().
                            where(scheduleObj.eventFields.id, 'equal', eventObj[scheduleObj.eventFields.recurrenceID]))[0];
                    }
                    scheduleObj.openEditor(eventObj, selectedMenuItem);
                    break;
                case 'Delete':
                    scheduleObj.deleteEvent(eventObj);
                    break;
                case 'DeleteOccurrence':
                case 'DeleteSeries':
                    scheduleObj.deleteEvent(eventObj, selectedMenuItem);
                    break;
            }
        }
    </script>
}
